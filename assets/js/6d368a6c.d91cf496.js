"use strict";(self.webpackChunkaws_blockchain_node_runners=self.webpackChunkaws_blockchain_node_runners||[]).push([[710],{2426:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"Blueprints/Sui","title":"Sui","description":"","source":"@site/docs/Blueprints/Sui.md","sourceDirName":"Blueprints","slug":"/Blueprints/Sui","permalink":"/aws-blockchain-node-runners/docs/Blueprints/Sui","draft":false,"unlisted":false,"editUrl":"https://github.com/aws-samples/aws-blockchain-node-runners/website/docs/Blueprints/Sui.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Sui"},"sidebar":"sidebar","previous":{"title":"Starknet","permalink":"/aws-blockchain-node-runners/docs/Blueprints/Starknet"},"next":{"title":"Tezos","permalink":"/aws-blockchain-node-runners/docs/Blueprints/Tezos"}}');var o=s(4848),i=s(8453);function l(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"sample-aws-blockchain-node-runner-app-for-sui-full-node",children:"Sample AWS Blockchain Node Runner app for Sui Full Node"})}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsx)(n.tr,{children:(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Contributed by"})})}),(0,o.jsx)(n.tbody,{children:(0,o.jsx)(n.tr,{children:(0,o.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,o.jsx)(n.a,{href:"https://github.com/yinalaws",children:"@yinalaws"}),", ",(0,o.jsx)(n.a,{href:"https://github.com/evertonfraga",children:"@evertonfraga"})]})})})]}),"\n",(0,o.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,o.jsx)(n.p,{children:"This blueprint has step by step guides to set up a single Sui Full Node."}),"\n",(0,o.jsx)(n.h3,{id:"sui-full-node-setup",children:"Sui Full Node setup"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"SingleNodeSetup",src:s(3531).A+"",width:"1002",height:"461"})}),"\n",(0,o.jsx)(n.p,{children:"This setup is for PoC or development environments and it supports Devnet, Testnet and Mainnet. It deploys a single EC2 instance with Sui client. The RPC port is exposed only to internal IP range of the VPC, while P2P ports allow external access to keep the client synced."}),"\n",(0,o.jsx)(n.h2,{id:"solution-walkthrough",children:"Solution Walkthrough"}),"\n",(0,o.jsx)(n.h3,{id:"open-aws-cloudshell",children:"Open AWS CloudShell"}),"\n",(0,o.jsx)(n.p,{children:"To begin, ensure you login to your AWS account with permissions to create and modify resources in IAM, EC2, EBS, VPC, S3, KMS, and Secrets Manager."}),"\n",(0,o.jsxs)(n.p,{children:["From the AWS Management Console, open the ",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/cloudshell/latest/userguide/welcome.html",children:"AWS CloudShell"}),", a web-based shell environment. If unfamiliar, review the ",(0,o.jsx)(n.a,{href:"https://youtu.be/fz4rbjRaiQM",children:"2-minute YouTube video"})," for an overview and check out ",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/cloudshell/latest/userguide/creating-vpc-environment.html",children:"CloudShell with VPC environment"})," that we'll use to test nodes API from internal IP address space."]}),"\n",(0,o.jsx)(n.p,{children:"Once ready, you can run the commands to deploy and test blueprints in the CloudShell."}),"\n",(0,o.jsx)(n.h3,{id:"clone-this-repository-and-install-dependencies",children:"Clone this repository and install dependencies"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/aws-samples/aws-blockchain-node-runners.git\ncd aws-blockchain-node-runners\nnpm install\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"NOTE:"})," ",(0,o.jsxs)(n.em,{children:["In this tutorial we will set all major configuration through environment variables, but you also can modify parameters in ",(0,o.jsx)(n.code,{children:"config/config.ts"}),"."]})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"prepare-to-deploy-nodes",children:"Prepare to deploy nodes"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Make sure you are in the root directory of the cloned repository"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"If you have deleted or don't have the default VPC, create default VPC"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"aws ec2 create-default-vpc\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"NOTE:"})," ",(0,o.jsxs)(n.em,{children:["You may see the following error if the default VPC already exists: ",(0,o.jsx)(n.code,{children:"An error occurred (DefaultVpcAlreadyExists) when calling the CreateDefaultVpc operation: A Default VPC already exists for this account in this region."}),". That means you can just continue with the following steps."]})]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"NOTE:"})," ",(0,o.jsxs)(n.em,{children:["The default VPC must have at least two public subnets in different Availability Zones, and public subnet must set ",(0,o.jsx)(n.code,{children:"Auto-assign public IPv4 address"})," to ",(0,o.jsx)(n.code,{children:"YES"})]})]}),"\n"]}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsx)(n.li,{children:"Configure  your setup"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Create your own copy of ",(0,o.jsx)(n.code,{children:".env"})," file and edit it:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Make sure you are in aws-blockchain-node-runners/lib/Sui\ncd lib/sui\npwd\ncp ./sample-configs/.env-sample-full .env\nnano .env\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"NOTE:"})," ",(0,o.jsxs)(n.em,{children:["You can find more examples inside the ",(0,o.jsx)(n.code,{children:"sample-configs"})," directory."]})]}),"\n"]}),"\n",(0,o.jsxs)(n.ol,{start:"4",children:["\n",(0,o.jsx)(n.li,{children:"Deploy common components such as IAM role, and Amazon S3 bucket to store data snapshots"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pwd\n# Make sure you are in aws-blockchain-node-runners/lib/sui\nnpx cdk deploy sui-common\n"})}),"\n",(0,o.jsx)(n.h3,{id:"deploy-sui-full-node",children:"Deploy Sui Full-Node"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Deploy Full Node"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pwd\n# Make sure you are in aws-blockchain-node-runners/lib/sui\nnpx cdk deploy sui-single-node --json --outputs-file single-node-deploy.json\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"NOTE:"})," ",(0,o.jsxs)(n.em,{children:["The default VPC must have at least two public subnets in different Availability Zones, and public subnet must set ",(0,o.jsx)(n.code,{children:"Auto-assign public IPv4 address"})," to ",(0,o.jsx)(n.code,{children:"YES"}),"."]})]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The EC2 instance will deploy, initialize the node and start the first sync. In Cloudformation the instance will show as successful once the node is running. From that point it still takes a while until the node is synced to the blockchain. You can check the sync status with the REST call below in step 4. If the `curl cannot connect to the node on port 9000, then the node is still importing. Once that's done, the curl command works."}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"After starting the node you need to wait for the inital syncronization process to finish. It may take from an hour to half a day depending on the the state of the network. You can use Amazon CloudWatch to track the progress. To see them:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Navigate to ",(0,o.jsx)(n.a,{href:"https://console.aws.amazon.com/cloudwatch/",children:"CloudWatch service"})," (make sure you are in the region you have specified for ",(0,o.jsx)(n.code,{children:"AWS_REGION"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:["Open ",(0,o.jsx)(n.code,{children:"Dashboards"})," and select ",(0,o.jsx)(n.code,{children:"sui-single-node-<network>"})," from the list of dashboards."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Once the initial synchronization is done, you should be able to access the RPC API of that node from within the same VPC. The RPC port is not exposed to the Internet. Check if the JSON-RPC port is open and working \u2014 run the following command from a terminal:"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"INSTANCE_ID=$(cat single-node-deploy.json | jq -r '..|.node-instance-id? | select(. != null)')\nNODE_INTERNAL_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text --region us-east-1)\necho \"NODE_INTERNAL_IP=$NODE_INTERNAL_IP\"\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Copy output from the last ",(0,o.jsx)(n.code,{children:"echo"})," command with ",(0,o.jsx)(n.code,{children:"NODE_INTERNAL_IP=<internal_IP>"})," and open ",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/cloudshell/latest/userguide/creating-vpc-environment.html",children:"CloudShell tab with VPC environment"})," to access internal IP address space. Paste ",(0,o.jsx)(n.code,{children:"NODE_INTERNAL_IP=<internal_IP>"})," into the new CloudShell tab. Then query the API:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# IMPORTANT: Run from CloudShell VPC environment tab\n# replace <your IP address> with your server IP address\ncurl --location --request POST $NODE_INTERNAL_IP:9000 \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{ "jsonrpc":"2.0", "method":"rpc.discover","id":1}\'\n'})}),"\n",(0,o.jsx)(n.p,{children:"The result should start like like this (the actual balance might change):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JSON",children:'{"jsonrpc":"2.0","result":{"openrpc":"1.2.6","info":{"title":"Sui JSON-RPC","description":"Sui JSON-RPC API for interaction with Sui Full node. Make RPC calls using https://fullnode.NETWORK.sui.io:443, where NETWORK is the network you want to use (testnet, devnet, mainnet). By default, local networks use port 9000.","contact":{"name":"Mysten Labs","url":"https://mystenlabs.com","email":"build@mystenlabs.com"},"license":{"name":"Apache-2.0","url":"https://raw.githubusercontent.com/MystenLabs/sui/main/LICENSE"},"version":"1.28.2"}}}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"clearing-up-and-undeploying-everything",children:"Clearing up and undeploying everything"}),"\n",(0,o.jsx)(n.p,{children:"Destroy RPC Nodes, Sync Nodes and Common components"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Setting the AWS account id and region in case local .env file is lost\nexport AWS_ACCOUNT_ID=<your_target_AWS_account_id>\nexport AWS_REGION=<your_target_AWS_region>\n\npwd\n# Make sure you are in aws-blockchain-node-runners/lib/Sui\n\n # Destroy Single Fullnode\ncdk destroy sui-single-node\n\n\n# You need to manually delete an s3 bucket with a name similar to 'sui-snapshots-$accountid-tz-nodes-common' on the console,firstly empty the bucket,secondly delete the bucket,and then execute\n# Delete all common components like IAM role and Security Group\ncdk destroy sui-common\n"})}),"\n",(0,o.jsx)(n.h3,{id:"faq",children:"FAQ"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"How to check the logs from the EC2 user-data script?"}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"NOTE:"})," ",(0,o.jsxs)(n.em,{children:["In this tutorial we chose not to use SSH and use Session Manager instead. That allows you to log all sessions in AWS CloudTrail to see who logged into the server and when. If you receive an error similar to ",(0,o.jsx)(n.code,{children:"SessionManagerPlugin is not found"}),", ",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html",children:"install Session Manager plugin for AWS CLI"})]})]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'pwd\n# Make sure you are in aws-blockchain-node-runners/lib/Sui\n\nexport INSTANCE_ID=$(jq -r \'.["sui-single-node-testnet"].nodeinstanceid\' single-node-deploy.json)\necho "INSTANCE_ID=" $INSTANCE_ID\naws ssm start-session --target $INSTANCE_ID\nsudo cat /var/log/cloud-init-output.log\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"If SSH is disabled, how to login to fullnode instance?"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"NODE_INTERNAL_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text)\necho \"NODE_INTERNAL_IP=\"$NODE_INTERNAL_IP\n pwd\n# Make sure you are in aws-blockchain-node-runners/lib/Sui\naws ssm start-session --target $INSTANCE_ID\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsx)(n.li,{children:"Service Tools"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"#Check Sui version\nsui -V\n# Check node logs\nsudo journalctl -fu suid -o cat\n# Check node status\nsudo service suid status\n# Restart node\nsudo systemctl restart suid\n# Stop Node\nsudo systemctl stop suid\n# Start Node\nsudo systemctl start suid\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"4",children:["\n",(0,o.jsx)(n.li,{children:"Journalctl and Node Status throws errors:"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Set up archival fallback to enable your node to fallback to an archive in case of lag, add this block to your fullnode.yaml file as described ",(0,o.jsx)(n.a,{href:"https://docs.sui.io/guides/operator/archives#set-up-archival-fallback",children:"here"}),". Restart Node\nExample:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'state-archive-read-config:\n  - object-store-config:\n      object-store: "S3"\n      # Use mysten-testnet-archives for testnet\n      # Use mysten-mainnet-archives for mainnet\n      bucket: "mysten-testnet-archives"\n      # Use your AWS account access key id\n      aws-access-key-id: ""\n      # Use your AWS account secret access key\n      aws-secret-access-key: ""\n      aws-region: "us-west-2"\n      object-store-connection-limit: 20\n    # How many objects to read ahead when catching up  \n    concurrency: 5\n    # Whether to prune local state based on latest checkpoint in archive.\n    # This should stay false for most use cases\n    use-for-pruning-watermark: false\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"5",children:["\n",(0,o.jsxs)(n.li,{children:["Restoring a Full node using snapshots: Restoring using RocksDB snapshots to restore from a RocksDB snapshot, follow ",(0,o.jsx)(n.a,{href:"https://docs.sui.io/guides/operator/snapshots",children:"these steps"}),":"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Syntax:\nsui-tool download-db-snapshot --latest \\\n--network <NETWORK> --snapshot-bucket <BUCKET-NAME> \\\n--snapshot-bucket-type <TYPE> --path <PATH-TO-NODE-DB> \\\n--num-parallel-downloads 25 \\\n--skip-indexes \\\n--no-sign-request\n\n#Example:  \nsudo sui-tool download-db-snapshot --latest --network testnet --path /data/sui/db/live --num-parallel-downloads 50 --skip-indexes --no-sign-request\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"6",children:["\n",(0,o.jsx)(n.li,{children:"Compare the number of checkpoints on your node and on chain"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"## replace <your IP address> with your server IP address\ncurl -q <your IP address>:9184/metrics 2>/dev/null | grep '^highest_synced_checkpoint'; echo\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'## replace <Network_ID> with devnet| testnet | mainnet\ncurl --location --request POST \'https://fullnode.<Network_ID>.sui.io:443/\' --header \'Content-Type: application/json\' --data-raw \'{"jsonrpc":"2.0", "id":1,"method":"sui_getLatestCheckpointSequenceNumber"}\'; echo\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"7",children:["\n",(0,o.jsx)(n.li,{children:"Monitoring Sui node metrics over port TCP/9184"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Enter your node's external IP at https://node.sui.zvalid.com/\n"})})]})}function r(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}const a={sidebar_label:"Sui"},c="",d={},h=[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Sui Full Node setup",id:"sui-full-node-setup",level:3},{value:"Solution Walkthrough",id:"solution-walkthrough",level:2},{value:"Open AWS CloudShell",id:"open-aws-cloudshell",level:3},{value:"Clone this repository and install dependencies",id:"clone-this-repository-and-install-dependencies",level:3},{value:"Prepare to deploy nodes",id:"prepare-to-deploy-nodes",level:3},{value:"Deploy Sui Full-Node",id:"deploy-sui-full-node",level:3},{value:"Clearing up and undeploying everything",id:"clearing-up-and-undeploying-everything",level:3},{value:"FAQ",id:"faq",level:3}];function u(e){const n={h1:"h1",header:"header",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:""})}),"\n","\n",(0,o.jsx)(r,{})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},3531:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/Architecture-SingleNode-fd41c99fa939f3179b9c5a27df9f49e8.png"},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var t=s(6540);const o={},i=t.createContext(o);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);