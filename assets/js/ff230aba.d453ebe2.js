"use strict";(self.webpackChunkaws_blockchain_node_runners=self.webpackChunkaws_blockchain_node_runners||[]).push([[44],{9152:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var t=s(4848),o=s(8453);const i={sidebar_position:1,sidebar_label:"About blueprints"},r="Node Runners Blueprints",c={id:"Blueprints/intro",title:"Node Runners Blueprints",description:"Node Runner Blueprints are TypeScrypt applications built with AWS Cloud Development Kit. They are infrastructure as code apps that you can use to deploy to AWS blockchain nodes in different configurations be it solo nodes or highly available setups. Most of the apps will look into .env file in its root directory for input params to know which compute, storage and node setup options to use during deployment.",source:"@site/docs/Blueprints/intro.md",sourceDirName:"Blueprints",slug:"/Blueprints/intro",permalink:"/aws-blockchain-node-runners/docs/Blueprints/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/aws-samples/aws-blockchain-node-runners/website/docs/Blueprints/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"About blueprints"},sidebar:"sidebar",previous:{title:"SetupCloud9",permalink:"/aws-blockchain-node-runners/docs/setup-cloud9.md"},next:{title:"Ethereum",permalink:"/aws-blockchain-node-runners/docs/Blueprints/Ethereum"}},l={},a=[{value:"Adding new Node Runner Blueprints",id:"adding-new-node-runner-blueprints",level:2},{value:"Recommended directory and file structure for a Node Runner Blueprint",id:"recommended-directory-and-file-structure-for-a-node-runner-blueprint",level:3},{value:"Reusable imports and CDK constructs for stacks in Node Runner Blueprints",id:"reusable-imports-and-cdk-constructs-for-stacks-in-node-runner-blueprints",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"node-runners-blueprints",children:"Node Runners Blueprints"}),"\n",(0,t.jsxs)(n.p,{children:["Node Runner Blueprints are TypeScrypt applications built with ",(0,t.jsx)(n.a,{href:"https://aws.amazon.com/cdk/",children:"AWS Cloud Development Kit"}),". They are infrastructure as code apps that you can use to deploy to AWS blockchain nodes in different configurations be it solo nodes or highly available setups. Most of the apps will look into ",(0,t.jsx)(n.code,{children:".env"})," file in its root directory for input params to know which compute, storage and node setup options to use during deployment."]}),"\n",(0,t.jsx)(n.p,{children:"\ud83d\udc48 Use navigation bar on the left for the setup guides for different protocols."}),"\n",(0,t.jsx)(n.h2,{id:"adding-new-node-runner-blueprints",children:"Adding new Node Runner Blueprints"}),"\n",(0,t.jsx)(n.p,{children:"First of all, THANK YOU! The easier it is to run a blockchain node on AWS the simpler it is for the ecosystem to build with it. Here are the major steps to contribute a Node Runner Blueprint:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Check with our list of ",(0,t.jsx)(n.a,{href:"https://github.com/aws-samples/aws-blockchain-node-runners/issues",children:"Issues"})," if someone is already working on the node type you are after. If yes - join the forces! If no, go to the next step."]}),"\n",(0,t.jsxs)(n.li,{children:["Create a new issue to propose a new node type to let everyone know that you are going ot work on it. Use ",(0,t.jsx)(n.code,{children:"Feature request"})," template for that."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://help.github.com/articles/fork-a-repo/",children:"Fork this repository"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Use one of the existing blueprints as a baseline. Choose the one that has architecture closest to the one you want to create."}),"\n",(0,t.jsxs)(n.li,{children:["Once you are happy with how your blueprint works, follow our ",(0,t.jsx)(n.a,{href:"https://github.com/aws-samples/aws-blockchain-node-runners/blob/main/CONTRIBUTING.md",children:"Contribution Guide"})," to create a ",(0,t.jsx)(n.a,{href:"https://help.github.com/articles/creating-a-pull-request/",children:"pull request"})," for our team to review it."]}),"\n",(0,t.jsx)(n.li,{children:"Once merged, let your community know that the new Node Runner Blueprint is ready for them to use!"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"recommended-directory-and-file-structure-for-a-node-runner-blueprint",children:"Recommended directory and file structure for a Node Runner Blueprint"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/doc/"})," - Documentation specific to the Node Runner Blueprint"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/lib/"})," - Place for CDK stacks and other blueprint assets"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/lib/assets/"})," - Place for everything that needs to be within the provisioned EC2 instance (user-data scripts, docker-compose files, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/lib/config/"})," - Your version of the config reader to parse values from ",(0,t.jsx)(n.code,{children:".env"})," file"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/lib/constructs/"})," - All CDK constructs specific to this  Node Runner Blueprint"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/lib/*-stack.ts"})," - All ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/cdk/v2/guide/stacks.html",children:"CDK stacks"})," for this Node Runner Blueprint"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/sample-configs/"})," - Place for sample configurations to deploy Node Runner Blueprint to your environment"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/test/"})," - Place for unit tests to verify the Node Runner Blueprint creates all necessary infrastructure"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/.env-sample"})," - A sample configuration file"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/app.ts"})," - Entry point to your AWS CDK application"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/cdk.json"})," - Config file for ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/cdk/v2/guide/featureflags.html",children:"feature flags"})," for your AWS CDK application"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/jest.config.json"})," - ",(0,t.jsx)(n.a,{href:"https://jestjs.io/docs/configuration",children:"Configuration file for Jest"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/your-chain/README.md"})," - All information and usage instructions for your Node Runner Blueprint"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"reusable-imports-and-cdk-constructs-for-stacks-in-node-runner-blueprints",children:"Reusable imports and CDK constructs for stacks in Node Runner Blueprints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/constructs/config.interface.ts"})," - Interface classes to implement your own configuration module. Compatible with ",(0,t.jsx)(n.code,{children:"ha-rpc-nodes-with-alb"})," and ",(0,t.jsx)(n.code,{children:"single-node"})," constructs (see below)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/constructs/constants.ts"})," - Useful constants to use in configuration files and to set up infrastructure."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/constructs/ha-rpc-nodes-with-alb.ts"})," - Provisions up to 4 identical EC2 instances to run nodes managed by an Auto Scaling Group and behind an Application Load Balancer."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/constructs/single-node.ts"})," - Creates a single EC2 instance to run a blockchain node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/constructs/snapshots-bucket.ts"})," - Creates an S3 bucket to store a copy of blockchain node state to speed up syncing process."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib/constructs/amb-ethereum-single-node.ts"})," - Creates a single Ethereum node with ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/ethereum-concepts.html",children:"Amazon Managed Blockchain Access"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var t=s(6540);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);